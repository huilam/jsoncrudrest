####################################################################
# json table mapping
####################################################################
# crud.sample-key.dbconfig=jdbc.postgres
# crud.sample-key.tablename=sampletable1
# crud.sample-key.jsonattr.jsonname1.colname=dbcol1
# crud.sample-key.jsonattr.jsonname2.colname=dbcol2
# crud.sample-key.jsonattr.jsonname3.sql=SELECT dbcol3 FROM TABLE1 WHERE dbcol1={jsonname1}

# crud.sample-key.exception.on-unknown-jsonattr=true  (default is false, drop quietly)

# ## Overriding url, once specify, the default url will be invalid. Support pathparam with "{xxx}"
# crud.sample-key.restapi.mapped.url=/v1/appconfig/{cfgId}  
#
# ## Max record to be fetched
# crud.sample-key.restapi.fetch.limit=1000
#
# ## default is false, true to return result only without pagination meta
# crud.sample-key.restapi.result.only=false 
# 
# crud.sample-key.restapi.proxy.url=
#
# crud.sample-key.restapi.id=jsonname1
#
# crud.sample-key.restapi.static.web=false  (default is false)
#
# crud.sample-key.restapi.plugin.implementation=<ICRUDServicePlugin implementation class>
####################################################################

#
framework.default.restapi.plugin.implementation=

framework.default.restapi.notfound.get.status=200
framework.default.restapi.notfound.get.content-type=application/json
framework.default.restapi.notfound.get.content-data={}

framework.default.restapi.notfound.status=404
framework.default.restapi.notfound.content-type=
framework.default.restapi.notfound.content-data=
#


crud.html.restapi.static.web=true

crud.SampleTestProxy.restapi.mapped.url=/v1/testproxy/{param1}/{param2}
crud.SampleTestProxy.restapi.proxy.url=/echo/{combined-param}
crud.SampleTestProxy.restapi.plugin.implementation=hl.jsoncrudrest.plugins.SampleTestProxy

#
#
crud.echo.restapi.mapped.url=/echo/{echo-text}
crud.echo.restapi.plugin.implementation=hl.jsoncrudrest.plugins.EchoPlugin


crud.dbselect.dbconfig=jdbc.postgres
crud.dbselect.tablename=jsoncrud_cfg
crud.dbselect.sqlname.reccount.sql=select count(*) from jsoncrud_cfg_values
crud.dbselect.restapi.plugin.implementation=hl.jsoncrudrest.plugins.SQLSelectPlugin


#crud.jsoncrud_cfg.restapi.mapped.url=/v1/appconfig/{cfgId}
crud.jsoncrud_cfg.dbconfig=jdbc.postgres
crud.jsoncrud_cfg.tablename=jsoncrud_cfg
crud.jsoncrud_cfg.jsonattr.cfgId.colname=cfg_id
crud.jsoncrud_cfg.jsonattr.appNamespace.colname=cfg_app_namespace
crud.jsoncrud_cfg.jsonattr.moduleCode.colname=cfg_module_code
crud.jsoncrud_cfg.jsonattr.createdTimestamp.colname=created_timestamp
crud.jsoncrud_cfg.jsonattr.enabled.colname=enabled

crud.jsoncrud_cfg.jsonattr.kvpair.sql=select cfg_key, cfg_value from jsoncrud_cfg_values where cfg_id = {cfgId} 
crud.jsoncrud_cfg.jsonattr.kvpair.mapping={"cfg_key":"cfg_value"}

crud.jsoncrud_cfg.jsonattr.kvpair.insert.sql=insert into jsoncrud_cfg_values (cfg_id, cfg_key, cfg_value) values ({cfgId}, {cfg_key}, {cfg_value})
crud.jsoncrud_cfg.jsonattr.keys.sql=select cfg_key from jsoncrud_cfg_values where cfg_id = {cfgId} 
crud.jsoncrud_cfg.jsonattr.keys.mapping=["cfg_key"]
crud.jsoncrud_cfg.jsonattr.emptyresult.sql=select cfg_key from jsoncrud_cfg_values where 1=2 
#crud.jsoncrud_cfg.exception.on-unknown-jsonattr=true
crud.jsoncrud_cfg.restapi.fetch.limit=1000
crud.jsoncrud_cfg.restapi.id=cfgId
crud.jsoncrud_cfg.restapi.echo.jsonattr.prefix=echo.
crud.jsoncrud_cfg.restapi.plugin.implementation=hl.jsoncrudrest.plugins.CRUDServiceSysOutPlugin


#
#-----
#
crud.jsoncrud_cfg_values.dbconfig=jdbc.postgres
crud.jsoncrud_cfg_values.tablename=jsoncrud_cfg_values
crud.jsoncrud_cfg_values.jsonattr.id.colname=cfg_values_id
crud.jsoncrud_cfg_values.jsonattr.cfgId.colname=cfg_id
crud.jsoncrud_cfg_values.jsonattr.key.colname=cfg_key
crud.jsoncrud_cfg_values.jsonattr.value.colname=cfg_value
crud.jsoncrud_cfg_values.jsonattr.createdTimestamp.colname=created_timestamp
crud.jsoncrud_cfg_values.jsonattr.enabled.colname=enabled
crud.jsoncrud_cfg_values.jsonattr.displaySeq.colname=cfg_seq
crud.jsoncrud_cfg_values.restapi.id=id
crud.jsoncrud_cfg_values.restapi.fetch.limit=

# aaaa
#crud.jsoncrud_cfg_values.restapi.plugin.implementation=

#

crud.stats.dbconfig=jdbc.postgres
crud.stats.tablename=(select evt_timestamp as start_timestamp, evt_timestamp as end_timestamp, * from idm_person) TBL
crud.stats.jsonattr.startTime.colname=start_timestamp
crud.stats.jsonattr.endTime.colname=end_timestamp
--
crud.stats.sqlname.totalfaces_by_cams.sql=SELECT to_char(FROM_TIMESTAMP, 'DD-Mon HH24:MI:SS') START_TIMESTAMP, to_char(TO_TIMESTAMP, 'DD-Mon HH24:MI:SS') CUTOFF_TIMESTAMP, (TO_TIMESTAMP - FROM_TIMESTAMP) TOTA_DURATION, RESOURCE_NAME, TOTAL_DETECTED_FACES FROM ( SELECT to_timestamp(MIN(EVT_TIMESTAMP)/1000) FROM_TIMESTAMP, to_timestamp(MAX(EVT_TIMESTAMP)/1000) TO_TIMESTAMP, RESOURCE_NAME, COUNT(*) TOTAL_DETECTED_FACES FROM IDM_PERSON GROUP BY RESOURCE_NAME FOR READ ONLY ) TBL ORDER BY RESOURCE_NAME
crud.stats.sqlname.totalfaces_all_cams.sql=SELECT to_char(FROM_TIMESTAMP, 'DD-Mon HH24:MI:SS') START_TIMESTAMP, to_char(TO_TIMESTAMP, 'DD-Mon HH24:MI:SS') CUTOFF_TIMESTAMP, (TO_TIMESTAMP - FROM_TIMESTAMP) TOTA_DURATION, TOTAL_DETECTED_FACES FROM ( SELECT to_timestamp(MIN(EVT_TIMESTAMP)/1000) FROM_TIMESTAMP, to_timestamp(MAX(EVT_TIMESTAMP)/1000) TO_TIMESTAMP, COUNT(*) TOTAL_DETECTED_FACES FROM IDM_PERSON FOR READ ONLY) TBL
--
crud.stats.sqlname.uniqueperson_by_cams.sql=SELECT to_char(FROM_TIMESTAMP, 'DD-Mon HH24:MI:SS') START_TIMESTAMP, to_char(TO_TIMESTAMP, 'DD-Mon HH24:MI:SS') CUTOFF_TIMESTAMP, (TO_TIMESTAMP - FROM_TIMESTAMP) TOTA_DURATION, RESOURCE_NAME, TOTAL_UNIQUE_PERSON FROM ( SELECT to_timestamp(MIN(EVT_TIMESTAMP)/1000) FROM_TIMESTAMP, to_timestamp(MAX(EVT_TIMESTAMP)/1000) TO_TIMESTAMP, RESOURCE_NAME, COUNT(DISTINCT PRI_PERSON_ID) TOTAL_UNIQUE_PERSON FROM IDM_PERSON GROUP BY RESOURCE_NAME FOR READ ONLY )TBL ORDER BY RESOURCE_NAME
crud.stats.sqlname.uniqueperson_all_cams.sql=SELECT to_char(FROM_TIMESTAMP, 'DD-Mon HH24:MI:SS') START_TIMESTAMP, to_char(TO_TIMESTAMP, 'DD-Mon HH24:MI:SS') CUTOFF_TIMESTAMP, (TO_TIMESTAMP - FROM_TIMESTAMP) TOTA_DURATION, TOTAL_UNIQUE_PERSON FROM ( SELECT to_timestamp(MIN(EVT_TIMESTAMP)/1000) FROM_TIMESTAMP, to_timestamp(MAX(EVT_TIMESTAMP)/1000) TO_TIMESTAMP, COUNT(DISTINCT PRI_PERSON_ID) TOTAL_UNIQUE_PERSON FROM IDM_PERSON FOR READ ONLY ) TBL
--
crud.stats.sqlname.facesperframe_by_cams.sql=SELECT RESOURCE_NAME, to_char(MIN(FROM_TIMESTAMP), 'DD-Mon HH24:MI:SS') FIRST_EVENT, to_char(MAX(TO_TIMESTAMP), 'DD-Mon HH24:MI:SS') LAST_EVENT, (MAX(TO_TIMESTAMP) - MIN(FROM_TIMESTAMP)) TOTAL_DURATION, ROUND(AVG(DETECTED_FACES_PERFRAME),0) AVG_FACES_PER_FRAME,MAX(DETECTED_FACES_PERFRAME) MAX_FACES_PER_FRAME, SUM(DETECTED_FACES_PERFRAME) TOTAL_DETECTED_FACES FROM ( SELECT to_timestamp(MIN(EVT_TIMESTAMP)/1000) FROM_TIMESTAMP, to_timestamp(MAX(EVT_TIMESTAMP)/1000) TO_TIMESTAMP, RESOURCE_NAME, COUNT(*) DETECTED_FACES_PERFRAME FROM IDM_PERSON GROUP BY RESOURCE_NAME, EVT_TIMESTAMP FOR READ ONLY ) TBL GROUP BY RESOURCE_NAME ORDER BY RESOURCE_NAME
--
crud.stats.restapi.fetch.limit=100000
crud.stats.restapi.plugin.implementation=hl.jsoncrudrest.plugins.SQLSelectPlugin


####################################################################
# JDBC Configuration
####################################################################
# jdbc.postgres.classname=org.postgresql.Driver
# jdbc.postgres.url=jdbc:postgresql://127.0.0.1:5432/postgres
# jdbc.postgres.uid=postgres
# jdbc.postgres.pwd=
####################################################################


jdbc.postgres.classname=org.postgresql.Driver
jdbc.postgres.url=jdbc:postgresql://127.0.0.1:5432/test
jdbc.postgres.uid=postgres
jdbc.postgres.pwd=postgres
jdbc.postgres.connpool=2
#jdbc.postgres.fetchsize=200
#jdbc.postgres.maxconn=5
#jdbc.postgres.conn.wait-interval.ms=100
#jdbc.postgres.conn.timeout.ms=3000

### (Optional) Pagination Configuration ###
#list.pagination.meta=meta
#list.pagination.result=result
#list.pagination.total=total
#list.pagination.fetchsize=fetchsize
#list.pagination.start=start
#list.pagination.sorting=sorting

### (Optional) Schema Validation Error Code Configuration ###
#dbschema.validation_errcode.not_nullable=DB1001
#dbschema.validation_errcode.exceed_size=DB1002
#dbschema.validation_errcode.invalid_type=DB1003
#dbschema.validation_errcode.system_field=DB1004

### (Optional) JSONCRUD framework Error Code Configuration ###
#jsoncrud.framework_errcode.invalid_jsoncrudcfg=FW1001
#jsoncrud.framework_errcode.sql_exception=FW1002
#jsoncrud.framework_errcode.plugin_exception=FW1003
#jsoncrud.framework_errcode.invalid_sorting=RA1001
#jsoncrud.framework_errcode.invalid_filter=RA1002